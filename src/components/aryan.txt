{/* Mobile Navbar */}
      <div className="md:hidden">
        <div className="container mx-auto px-4 flex items-center justify-between align-items-center">
          {/* Menu Button */}
          <button 
            onClick={() => setMobileMenuOpen(true)}
            className=""
          >
            <Menu size={24} className={isScrolled ? "text-[#74070E]" : "text-[#F4E3B2]"} />
          </button>

          {/* Centered Toggle */}
          <div className="flex-1 flex justify-center px-2">
            <ToggleGroup 
              type="single" 
              value={currentServiceType}
              onValueChange={(value) => handleServiceChange(value as ServiceType)}
              className="border rounded-full mr-20"
            >
              <ToggleGroupItem 
                value="renting" 
                className="text-xs rounded-l-full px-3 data-[state=on]:bg-[#74070E] data-[state=on]:text-[#F4E3B2]"
              >
                Renting
              </ToggleGroupItem>
              <ToggleGroupItem 
                value="thrifting" 
                className="text-xs rounded-r-full px-3 data-[state=on]:bg-[#74070E] data-[state=on]:text-[#F4E3B2]"
              >
                Thrifting
              </ToggleGroupItem>
            </ToggleGroup>
          </div>

          {/* Scroll-triggered Logo */}
          {showLogo && (
            <div className={`absolute left-1/2 transform -translate-x-1/2 transition-opacity duration-300 ease-in-out ml-10 ${
              showLogo ? 'opacity-100' : 'opacity-0'
            }`}>
              <Logo isSmall={true} />
            </div>
          )}

          {/* Right Icons */}
          <div className="flex items-center space-x-0">
            <Link to="/login" className="p-2 ml-3">
              <User size={20} className={isScrolled ? "text-[#74070E]" : "text-[#F4E3B2]"} />
            </Link>
            <Cart />
          </div>
        </div>

        {/* Mobile Menu - Full Screen Overlay */}
        {mobileMenuOpen && (
          <div className="fixed inset-0 z-[1000]">
            {/* Close Button - Fixed at top right */}
            <button
              onClick={() => setMobileMenuOpen(false)}
              className="fixed top-5 left-3 p-2 text-[#74070E] z-[1001]"
            >
              <X size={24} />
            </button>

            {/* Menu Content - Scrollable container */}
            <div className="h-[100vh] w-[70vw] fixed pt-16 pb-8 overflow-y-auto bg-[#F4E3B2]">
              <div className="container mx-auto px-4 mt-1 text-[#74070E]">
                <Popover>
                  <PopoverTrigger asChild>
                    <Button variant="ghost" className="w-full justify-between mb-6">
                      <div className="flex items-center font-bold">
                        <MapPin size={16} className="mr-2 font-bold" />
                        <span>{selectedLocation}</span>
                      </div>
                      <ChevronDown size={16} />
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-full">
                    {locations.map((location) => (
                      <Button
                        key={location}
                        variant="ghost"
                        className="w-full justify-start"
                        onClick={() => setSelectedLocation(location)}
                      >
                        {location}
                      </Button>
                    ))}
                  </PopoverContent>
                </Popover>

                {/* Service Type Toggle (Mobile) */}
                <div className="mb-6">
                  <ToggleGroup 
                    type="single" 
                    value={currentServiceType}
                    onValueChange={(value) => handleServiceChange(value as ServiceType)}
                    className="border rounded-full w-full"
                  >
                    <ToggleGroupItem 
                      value="renting" 
                      className="text-xs rounded-l-full px-3 data-[state=on]:bg-[#74070E] data-[state=on]:text-[#F4E3B2] w-1/2"
                    >
                      Renting
                    </ToggleGroupItem>
                    <ToggleGroupItem 
                      value="thrifting" 
                      className="text-xs rounded-r-full px-3 data-[state=on]:bg-[#74070E] data-[state=on]:text-[#F4E3B2] w-1/2"
                    >
                      Thrifting
                    </ToggleGroupItem>
                  </ToggleGroup>
                </div>

                {/* Search */}
                <button
                  onClick={() => {
                    setIsSearchOpen(true);
                    setMobileMenuOpen(false);
                  }}
                  className="flex items-center w-full py-3 px-4 mb-4 rounded-lg bg-gray-50"
                >
                  <Search size={20} className="mr-3 text-[#74070E]" />
                  <span>Search Products</span>
                </button>

                {/* Categories */}
                <div className="space-y-2 mb-6">
                  {[...leftCategories, ...rightCategories].map((category, index) => (
                    <Disclosure key={index}>
                      {({ open }) => (
                        <div className="border-b border-gray-700">
                          <Disclosure.Button className="flex justify-between items-center w-full py-3 px-2">
                            <span className="font-bold">{category.title}</span>
                            <ChevronDown className={`transition-transform ${open ? 'rotate-180' : ''}`} />
                          </Disclosure.Button>
                          <Disclosure.Panel className="pl-4">
                            {category.submenu.map((item, idx) => (
                              <Link
                                key={idx}
                                to="#"
                                className="py-2.5 px-2 text-gray-600 hover:bg-gray-50 rounded-lg flex justify-ends"
                                onClick={() => setMobileMenuOpen(false)}
                              >
                                {item}
                              </Link>
                            ))}
                          </Disclosure.Panel>
                        </div>
                      )}
                    </Disclosure>
                  ))}
                </div>

                {/* Additional Links */}
                <div className="space-y-2">
                  <Link
                    to="/wishlist"
                    className="flex items-center py-3 px-4 rounded-lg hover:bg-gray-50"
                    onClick={() => setMobileMenuOpen(false)}
                  >
                    <Heart size={20} className="mr-3 text-[#74070E]" />
                    <span>Wishlist ({wishlistItemCount})</span>
                  </Link>
                  <button className="flex items-center w-full py-3 px-4 rounded-lg hover:bg-gray-50">
                    <Bell size={20} className="mr-3 text-[#74070E]" />
                    <span>Notifications ({unreadCount})</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>